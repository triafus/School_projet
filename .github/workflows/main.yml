name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ðŸ”¹ Forcer npm registry (global)
      - name: Force npm registry
        run: echo "registry=https://registry.npmjs.org/" > ~/.npmrc

      - name: Install Root Dependencies
        run: npm ci

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # ðŸ”¹ Forcer pnpm registry
      - name: Force pnpm registry
        run: pnpm config set registry https://registry.npmjs.org/

      - name: Install Client Dependencies
        run: |
          cd client
          pnpm install --frozen-lockfile

      - name: Install Server Dependencies
        run: |
          cd server
          npm ci

      - name: Build Client
        run: |
          cd client
          pnpm run build
        env:
          NODE_ENV: production

      - name: Build Server
        run: |
          cd server
          npm run build
        env:
          NODE_ENV: production

      - name: Run Client Tests (if they exist)
        run: |
          cd client
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            pnpm test
          else
            echo "No test script found in client package.json"
          fi
        continue-on-error: true

      - name: Run Server Tests (if they exist)
        run: |
          cd server
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            npm test
          else
            echo "No test script found in server package.json"
          fi
        continue-on-error: true

      - name: Security Audit
        run: |
          cd client && pnpm audit --audit-level moderate || true
          cd ../server && npm audit --audit-level moderate || true
        continue-on-error: true

      - name: Upload Client Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/dist/
          retention-days: 7

      - name: Upload Server Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: server-build
          path: server/dist/
          retention-days: 7

  deploy-client:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # ðŸ”¹ Forcer pnpm registry
      - name: Force pnpm registry
        run: pnpm config set registry https://registry.npmjs.org/

      - name: Install Client Dependencies
        run: |
          cd client
          pnpm install --frozen-lockfile

      - name: Build Client for Production
        run: |
          cd client
          pnpm run build
        env:
          NODE_ENV: production

      - name: Deploy Client to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: client

  deploy-server:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Server Dependencies
        run: |
          cd server
          npm ci

      - name: Build Server for Production
        run: |
          cd server
          npm run build
        env:
          NODE_ENV: production

      - name: Deploy Server to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_SERVER }}
          vercel-args: '--prod'
          working-directory: server
