```yaml
name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18] # Node.js versions to test against
        os: [ubuntu-latest, windows-latest, macos-latest] # Operating systems to test against

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install
        env:
          NODE_ENV: test

      - name: Build Client
        run: pnpm --filter client build
        working-directory: client

      - name: Build Server
        run: pnpm --filter server build
        working-directory: server

      - name: Run Tests
        run: pnpm test
        env:
          CI: true

      - name: Code Coverage
        run: pnpm coverage
        env:
          CI: true

      - name: Security Audit
        run: pnpm audit

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: client/coverage/**

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: client-build
          path: client/dist/**

      - name: Upload Server Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: server-build
          path: server/dist/**

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' # Only deploy on main branch
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install Dependencies
        run: pnpm install
        env:
          NODE_ENV: production

      - name: Build Client for Production
        run: pnpm --filter client build
        working-directory: client

      - name: Build Server for Production
        run: pnpm --filter server build
        working-directory: server

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          working-directory: client

      - name: Notify Build Status
        uses: peter-evans/slack-github-action@v1
        with:
          status: ${{ job.status }}
          channel: '#build-notifications'
          token: ${{ secrets.SLACK_TOKEN }}

      - name: Notify Deployment Status
        uses: peter-evans/slack-github-action@v1
        with:
          status: ${{ job.status }}
          channel: '#deployment-notifications'
          token: ${{ secrets.SLACK_TOKEN }}

```
